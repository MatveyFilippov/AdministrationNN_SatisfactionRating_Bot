from .base import BOT, DP
from .global_tools import CallbackChecker, delete_message, send_message_to_admins
import settings
from aiogram.types import CallbackQuery, ContentType, Message, Update
from aiogram.utils import exceptions as aiogram_exceptions
from datetime import datetime
import logging
import traceback


async def on_startup(dispatcher):
    await send_message_to_admins("–ë–æ—Ç –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω -> —Ä–∞–±–æ—Ç–∞–µ—Ç üê•")
    print("Bot is alive")


async def on_shutdown(dispatcher):
    logging.info("Bot is shut down")
    await send_message_to_admins("‚ö†Ô∏è<b>–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω</b>‚ö†Ô∏è")


@DP.edited_message_handler(state="*")
async def handle_edited_message(message: Message):
    await message.reply("""üö´–í—ã –≤–Ω–µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∞, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ <b>–ù–ï –ü–†–ï–î–£–°–ú–û–¢–†–ï–ù–ê</b> —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è(
    \n–ü–æ–ª—É—á–∞—Ç–µ–ª—å <b>–ù–ï –£–í–ò–î–ò–¢</b> –≤–∞—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π. üí¨–õ—É—á—à–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ""", parse_mode="HTML")


@DP.callback_query_handler(CallbackChecker(lambda c: c.data.startswith("delete_message")), state="*")
async def delete_message(callback: CallbackQuery):
    if callback.data.endswith("+1"):
        try:
            await delete_message(callback.message.reply_to_message.message_id)
        except AttributeError:
            pass
    await delete_message(callback.message)


@DP.callback_query_handler(state="*")
async def unknown_callback(callback: CallbackQuery):
    if callback.data.startswith("TODO"):
        await callback.answer("üë∑\n–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
        return
    await callback.answer(f"ü§∑\n–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {callback.data} ", show_alert=True)


@DP.message_handler(content_types=ContentType.ANY, state="*")
async def another_message(message: Message):
    await message.reply(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å üòî", parse_mode="HTML")


@DP.errors_handler()
async def error_handler(update: Update, exception: Exception):
    err_time = datetime.now(settings.BOT_TIMEZONE).strftime(settings.DATETIME_FORMAT)
    error_text = "".join(traceback.format_exception(type(exception), exception, exception.__traceback__))
    tb = traceback.extract_tb(exception.__traceback__)
    logging.error(f"{type(exception).__name__} in '{tb[-1].name}'", exc_info=True)
    try:
        await BOT.send_message(
            chat_id=update.message.chat.id, parse_mode="HTML", disable_notification=True,
            text=(
                f"{err_time} ({settings.BOT_TIMEZONE.zone}) --- <b>ERROR</b>"
                "\n–ü–µ—Ä–µ–¥–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            ),
        )
        if update.message.from_user.username:
            text = f"–û—à–∏–±–∫–∞ –æ—Ç @{update.message.from_user.username}"
        else:
            text = f"–û—à–∏–±–∫–∞ –æ—Ç {update.message.from_user.full_name}"
    except AttributeError:
        text = "–û—à–∏–±–∫–∞ –≤ —Å–∞–º–æ–º –∫–æ–¥–µ"
    except (aiogram_exceptions.ChatNotFound, aiogram_exceptions.BotBlocked):
        text = "–û—à–∏–±–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Å—Ç–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"

    await send_message_to_admins((
        f"{err_time} ({settings.BOT_TIMEZONE.zone})"
        f"\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ <b>{type(exception).__name__}</b> –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {tb[-1].name}"
    ))
    await send_message_to_admins(text + f"\n\n<code>{error_text}</code>")
